명령어 정리

<git>
    initial configuration
    $ git config --global user.email "hongrr123@gmail.com"
    $ git config --global user.name "rokong"
    $ git remote add origin https://github.com/rokong/tutorial.git

    initial workspace
    - 적당한 dir로 이동
    $ git init .
    $ git pull https://github.com/rokong/tutorial.git
    - 코드 작성

    first commit
    $ git add *
    $ git commit -m "~~~"
    $ git push https://github.com/rokong/tutorial.git master

    pull
    $ git pull origin master
    - merge 실패의 경우 수정
    $ git commit -m "~~~"
    $ git add *
    $ git commit -m ""
    $ git push origin master

<iptables>
    iptalbes의 nat 규칙
    $ sudo iptables -L -n -t nat
    - (L)리스트 출력 / (n)이름말로 숫자로 / (t)특정 테이블 보기

    :80 redirect :8080 규칙추가
    $ sudo iptables -A PREROUTING -t nat -i eth0 -p tcp --dport 80 -j REDIRECT --to-port 8080
    - (A)append / (i)입력 인터페이스 / (p)프로토콜 / (j)할 일

    number 표시해서 목록보기
    $ sudo iptables -t nat -L --line-numbers

    특정 규칙 삭제하기
    $ sudo iptables -t nat -D PREROUTING 1
    - PREROUTING의 1번 규칙을 삭제

<code-server by systemctl>
    현재 실행 중인 서비스를 볼 때
    $ systemctl --all

    현재 실행 중인 console을 볼 때
    $ systemctl --user status code-server.service
    
    자동실행을 설정할 때
    $ systemctl --user enable --now code-server
    - --user : 현재 사용자의 서비스로 등록 (--user로 등록했으면 나머지도 다 붙여서 명령해야 함)
    - enable : 자동실행 등록 (끄려면 disable)
    - --now : 당장 지금 그 서비스를 실행한다
    
    실행에 실패한 UNIT을 볼 때
    $ systemctl --user --failed
    
    재기동
    $systemctl --user restart code-server.service
    
    종료할 때
    $ systemctl --user stop code-server.service
    
    시작할 때
    $ systemctl --user start code-server.service

    매번 user로 접속하여 시작하기 귀찮을 때
    - /usr/lib/systemd/user/code-server.service
    - 

<jdk>
    설치할 목록 보기
    $ yum list java*
    - jre(실행파일에 필요한 것)은 *.x86_64
    - jdk(개발자한테 필요한 것)은 -devel.x86_64
    - jdk 설치하면 알아서 jre도 설치가 된다
    
    설치하기
    $ yum install java-1.8.0-openjdk-devel.x86_64
    
    잘 설치가 되었는지 확인
    - 먼저 재기동
    $ java -version
    $ javac -version
    
    JAVA_HOME 설정
    $ which javac
    - javac이라는 명령어가 어디에서 불러오는지 확인
    
    $ readlink -f /usr/bin/javac
    - 저 디렉토리는 어디를 가리키고 있는가?
    
    $ vi /etc/profile
        export JAVA_HOME=/usr/lib/jvm/java-1.8.0-openjdk-1.8.0.262.b10-0.el8_2.x86_64
    
    $ source /etc/profile
    - 변경내용 적용
    
    $ echo $JAVA_HOME
    - 지정한 경로가 잘 나오면 성공!

<maven>
    wget 설치
    - FTP로 올리려다가 잘 몰라서 mirror에서 받으려고 한다
    - yum install wget

    wget이 잘 설치되었나 확인
    $ wget --version
    - 예상보다 여러 줄이 나왔는데 어쨌든 잘 설치가 되었음

    maven tar 다운로드
    $ wget http://mirror.apache-kr.org/maven/maven-3/3.6.3/binaries/apache-maven-3.6.3-bin.tar.gz

    압축해제
    $ tar -xvzf apache-maven-3.6.3-bin.tar.gz

    기존 tar 파일 삭제
    $ rm apache-maven-3.6.3-bin.tar.gz

    디렉토리 이동
    $ sudo mv ~/apache-maven-3.6.3 /usr/lib/maven
    - 옮기면서 maven으로 이름도 바꿔준다
    - /opt가 아닌 /usr/lib/으로 옮기도록 한다
    - TODO : /usr/lib 과 /usr/local/lib의 차이점은?

    환경변수 설정
    $ sudo vim /etc/profile
        MAVEN_HOME=/usr/lib/maven
        PATH=$PATH:$MAVEN_HOME/bin
        export MAVEN_HOME
    $ source /etc/profile
    $ echo $MAVEN_HOME
    $ mvn --version

<maven in vscode>
    //출처 : https://jhleeeme.github.io/java-and-maven-uses-in-vscode/
    - Maven for Java extension 설치
    - 좌측 explorer에서 우클릭 후 Create maven project

    - archetype : maven-archetype-quickstart
    - version : 1.4

        <groupId>my-project.hello-maven</groupId>
        <artifactId>install-test</artifactId>
        <version>0.0.1</version>
        <name>install-test</name>
    
    - 지정 후 Y 입력

    - Hello World가 있는 App으로 이동하고 F5로 run
    - build failed해도 proceed (오류로그가 남아있어서 그냥 오류로 인식. 그냥 무시하자.)

    war 배포
    - pom.xml 내 <packaging>war</packaging> 추가
    - 왼쪽 explorer에서 MAVEN PROJECTS 내 나의 프로젝트 우클릭
    - install 클릭 그러면 target/ 내 war가 생성됨
    - *.war 우클릭 -> Run on Tomcat Server 클릭
    
    $ netstat -tlnp
    - tcp 포트 중에서 listening 중인 process들을 naming하지 않고 PID와 함께 출력한다

    $ ps -ef | grep tomcat
    - process 중에서 커널 프로세스를 제외하여 full로 보여준다

    $ curl 127.0.0.1:8081
    - 80포트 열기가 힘들어서 request test

<tomcat>
    mirror 사이트에서 설치
    $ wget http://mirror.navercorp.com/apache/tomcat/tomcat-7/v7.0.105/bin/apache-tomcat-7.0.105.tar.gz
    - 한 번 배워놓고 잘 쓰고있다

    압축해제
    $ tar -xvzf apache-tomcat-7.0.105.tar.gz

    기존 tar 파일 삭제
    $ rm apache-tomcat-7.0.105.tar.gz

    디렉토리 이동
    $ sudo mv ~/apache-tomcat-7.0.105/ /usr/share/tomcat
    - 여기서는 /usr/share로 이동
    - share 디렉토리는 어느 architecture에서도 사용가능한 것들

    환경변수 설정
    $ sudo vim /etc/profile
        CATALINA_HOME=/usr/share/tomcat
        PATH=$PATH:$CATALINA_HOME/bin
        export CATALINA_HOME
    $ source /etc/profile
    $ echo $CATALINA_HOME
    
    manager 설정
    $ $CATALINA_HOME/conf/tomcat-users.xml
        <role rolename="manager"/>
        <role rolename="manager-gui"/>
        <role rolename="admin"/>
        <user username="admin" password="root" roles="admin,manager,manager-gui"/>
    - 추가 후 reload

<servlet-jsp in vscoode>
    - 왼쪽 explorer에서 우클릭 > Create maven project
    - more 눌러서 find more archetype 찾기
    - maven archetype webapp 설치

    - pom.xml에서 수정
        <maven.compiler.source>1.8</maven.compiler.source>
        <maven.compiler.target>1.8</maven.compiler.target>

<spring in vscode>
    - 왼쪽 explorer에서 우클릭 > Create maven project
    - more 눌러서 find more archetype 찾기
    - maven archetype webapp 설치

    - 실행되는 첫 commend가 *mvn.cmd일 경우 Window 환경에 맞추어져서 그런 것임
    - 실패한 명령어 따라서 *mvn.cmd를 *mvn으로 변경 후 실행

    - pom.xml에서 수정
        <maven.compiler.source>1.8</maven.compiler.source>
        <maven.compiler.target>1.8</maven.compiler.target>

    maven standard directory layout
    //출처 : https://maven.apache.org/guides/introduction/introduction-to-the-standard-directory-layout.html
    - pom.xml           //설정파일
    - src               //개발
      - main
        - java          //src
        - resources     //lib
        - webapp        //WebContent
      - test
        - java
        - resources
    - target            //결과물

    spring framework
    //출처 : https://docs.spring.io/spring/docs/4.3.28.RELEASE/spring-framework-reference/htmlsingle/