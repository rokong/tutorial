명령어 정리

<git>
    initial configuration
    $ git config --global user.email "hongrr123@gmail.com"
    $ git config --global user.name "rokong"
    $ git remote add origin https://github.com/rokong/tutorial.git

    initial workspace
    - 적당한 dir로 이동
    $ git init .
    $ git pull https://github.com/rokong/tutorial.git
    - 코드 작성

    first commit
    $ git add *
    $ git commit -m "~~~"
    $ git push https://github.com/rokong/tutorial.git master

    pull
    $ git pull origin master
    - merge 실패의 경우 수정
    $ git commit -m "~~~"
    $ git add *
    $ git commit -m ""
    $ git push origin master

<iptables>
    iptalbes의 nat 규칙
    $ sudo iptables -L -n -t nat
    - (L)리스트 출력 / (n)이름말로 숫자로 / (t)특정 테이블 보기

    :80 redirect :8081 규칙추가
    $ sudo iptables -A PREROUTING -t nat -i eth0 -p tcp --dport 80 -j REDIRECT --to-port 8081
    - (A)append / (i)입력 인터페이스 / (p)프로토콜 / (j)할 일

    number 표시해서 목록보기
    $ sudo iptables -t nat -L --line-numbers

    특정 규칙 삭제하기
    $ sudo iptables -t nat -D PREROUTING 1
    - PREROUTING의 1번 규칙을 삭제

<code-server by systemctl>
    현재 실행 중인 서비스를 볼 때
    $ systemctl --all

    현재 실행 중인 console을 볼 때
    $ systemctl --user status code-server.service
    
    자동실행을 설정할 때
    $ systemctl --user enable --now code-server
    - --user : 현재 사용자의 서비스로 등록 (--user로 등록했으면 나머지도 다 붙여서 명령해야 함)
    - enable : 자동실행 등록 (끄려면 disable)
    - --now : 당장 지금 그 서비스를 실행한다
    
    자동실행에 등록되었는지 확인
    $ systemctl --user is-enabled code-server

    실행에 실패한 UNIT을 볼 때
    $ systemctl --user --failed
    
    재기동
    $systemctl --user restart code-server.service
    
    종료할 때
    $ systemctl --user stop code-server.service
    
    시작할 때
    $ systemctl --user start code-server.service
    
    서버 시작 시 실행할 때
    # systemctl enable code-server
    - Failed to enable unit: Unit file code-server.service does not exist.
    - code-server.service 파일이 없음
    
    # cd /usr/lib/systemd
    # cp ./user/code-server.service ./system/code-server.service
    - user가 아닌 system에 있어야 root에서 접근 가능
    - 그런데 이렇게 되면 code-server도 root에서 실행
    - 그래서 root -> code-server 실행보다, root -> hongrr123 실행이 더 안전함
    
    서버 시작 시 사용자 시작
    # loginctl enable-linger hongrr123
    # loginctl show-user hongrr123
    - Linger=yes / Linger=no 확인
    
<jdk>
    설치할 목록 보기
    $ yum list java*
    - jre(실행파일에 필요한 것)은 *.x86_64
    - jdk(개발자한테 필요한 것)은 -devel.x86_64
    - jdk 설치하면 알아서 jre도 설치가 된다
    
    설치하기
    $ yum install java-1.8.0-openjdk-devel.x86_64
    
    잘 설치가 되었는지 확인
    - 먼저 재기동
    $ java -version
    $ javac -version
    
    JAVA_HOME 설정
    $ which javac
    - javac이라는 명령어가 어디에서 불러오는지 확인
    
    $ readlink -f /usr/bin/javac
    - 저 디렉토리는 어디를 가리키고 있는가?
    
    $ vi /etc/profile
        export JAVA_HOME=/usr/lib/jvm/java-1.8.0-openjdk-1.8.0.262.b10-0.el8_2.x86_64
    
    $ source /etc/profile
    - 변경내용 적용
    
    $ echo $JAVA_HOME
    - 지정한 경로가 잘 나오면 성공!

<maven>
    wget 설치
    - FTP로 올리려다가 잘 몰라서 mirror에서 받으려고 한다
    - yum install wget

    wget이 잘 설치되었나 확인
    $ wget --version
    - 예상보다 여러 줄이 나왔는데 어쨌든 잘 설치가 되었음

    maven tar 다운로드
    $ wget http://mirror.apache-kr.org/maven/maven-3/3.6.3/binaries/apache-maven-3.6.3-bin.tar.gz

    압축해제
    $ tar -xvzf apache-maven-3.6.3-bin.tar.gz

    기존 tar 파일 삭제
    $ rm apache-maven-3.6.3-bin.tar.gz

    디렉토리 이동
    $ sudo mv ~/apache-maven-3.6.3 /usr/lib/maven
    - 옮기면서 maven으로 이름도 바꿔준다
    - /opt가 아닌 /usr/lib/으로 옮기도록 한다
    - TODO : /usr/lib 과 /usr/local/lib의 차이점은?

    환경변수 설정
    $ sudo vim /etc/profile
        MAVEN_HOME=/usr/lib/maven
        PATH=$PATH:$MAVEN_HOME/bin
        export MAVEN_HOME
    $ source /etc/profile
    $ echo $MAVEN_HOME
    $ mvn --version

<maven in vscode>
    //출처 : https://jhleeeme.github.io/java-and-maven-uses-in-vscode/
    - Maven for Java extension 설치
    - 좌측 explorer에서 우클릭 후 Create maven project

    - archetype : maven-archetype-quickstart
    - version : 1.4

        <groupId>my-project.hello-maven</groupId>
        <artifactId>install-test</artifactId>
        <version>0.0.1</version>
        <name>install-test</name>
    
    - 지정 후 Y 입력

    - Hello World가 있는 App으로 이동하고 F5로 run
    - build failed해도 proceed (오류로그가 남아있어서 그냥 오류로 인식. 그냥 무시하자.)

    war 배포
    - pom.xml 내 <packaging>war</packaging> 추가
    - 왼쪽 explorer에서 MAVEN PROJECTS 내 나의 프로젝트 우클릭
    - install 클릭 그러면 target/ 내 war가 생성됨
    - *.war 우클릭 -> Run on Tomcat Server 클릭
    
    $ netstat -tlnp
    - tcp 포트 중에서 listening 중인 process들을 naming하지 않고 PID와 함께 출력한다

    $ ps -ef | grep tomcat
    - process 중에서 커널 프로세스를 제외하여 full로 보여준다

    $ curl 127.0.0.1:8081
    - 80포트 열기가 힘들어서 request test

<tomcat>
    mirror 사이트에서 설치
    $ wget http://mirror.navercorp.com/apache/tomcat/tomcat-7/v7.0.105/bin/apache-tomcat-7.0.105.tar.gz
    - 한 번 배워놓고 잘 쓰고있다

    압축해제
    $ tar -xvzf apache-tomcat-7.0.105.tar.gz

    기존 tar 파일 삭제
    $ rm apache-tomcat-7.0.105.tar.gz

    디렉토리 이동
    $ sudo mv ~/apache-tomcat-7.0.105/ /usr/share/tomcat
    - 여기서는 /usr/share로 이동
    - share 디렉토리는 어느 architecture에서도 사용가능한 것들

    환경변수 설정
    $ sudo vim /etc/profile
        CATALINA_HOME=/usr/share/tomcat
        PATH=$PATH:$CATALINA_HOME/bin
        export CATALINA_HOME
    $ source /etc/profile
    $ echo $CATALINA_HOME
    
    manager 설정
    $ $CATALINA_HOME/conf/tomcat-users.xml
        <role rolename="manager"/>
        <role rolename="manager-gui"/>
        <role rolename="admin"/>
        <user username="admin" password="root" roles="admin,manager,manager-gui"/>
    - 추가 후 reload

    shell 실행 시 환경변수 자동설정
    $ vim ~/.bashrc
        source /etc/profile
    - bash 실행 때마다 해당 명령어 자동실행

<tomcat operation>
    vscode extension이 불편해서 직접 배포하기로 함

    maven projects에서 clean 후 package

    배포파일 복사
    - $ cp target/*.war $CATALINA_HOME/webapps/

    tomcat 시작
    - $CATALINA_HOME/bin/startup.sh
    - 이러면 알아서 war 파일 deploy (재배포 시에도 알아서 인식)

    tomcat 로그보기
    - tail -f -n 50 $CATALINA_HOME/logs/catalina.out
        - 실시간 로그 확인 가능
    
    - TODO : deploy shell 만들기

<servlet-jsp in vscoode>
    - 왼쪽 explorer에서 우클릭 > Create maven project
    - more 눌러서 find more archetype 찾기
    - maven archetype webapp 설치

    - pom.xml에서 수정
        <maven.compiler.source>1.8</maven.compiler.source>
        <maven.compiler.target>1.8</maven.compiler.target>

<spring in vscode>
    - 왼쪽 explorer에서 우클릭 > Create maven project
    - more 눌러서 find more archetype 찾기
    - maven archetype webapp 설치

    - 실행되는 첫 commend가 *mvn.cmd일 경우 Window 환경에 맞추어져서 그런 것임
    - 실패한 명령어 따라서 *mvn.cmd를 *mvn으로 변경 후 실행

    - pom.xml에서 수정
        <maven.compiler.source>1.8</maven.compiler.source>
        <maven.compiler.target>1.8</maven.compiler.target>

    maven standard directory layout
    //출처 : https://maven.apache.org/guides/introduction/introduction-to-the-standard-directory-layout.html
    - pom.xml           //설정파일
    - src               //개발
      - main
        - java          //src
        - resources     //lib
        - webapp        //WebContent
      - test
        - java
        - resources
    - target            //결과물

    spring framework
    //출처 : https://docs.spring.io/spring/docs/4.3.28.RELEASE/spring-framework-reference/htmlsingle/

    - suggest short key : shift + space (현재 os에서는 언어 전환으로 인식)

    - web.xml
    <servlet-mapping>
        <servlet-name>dispatcher</servlet-name>
        <url-pattern>/</url-pattern>
    </servlet-mapping>
    - /*로 했더니 안되더라. /로 하자.

    - java test runner : 0.24.0 으로 하니깐 잘 되더라.

    - controller에서 class와 function 둘 다 request mapping 해주었음.

    Publish 방법
    - maven projects에서 Clean 후 Package
    - target/package/*.war 우클릭 -> Run on tomcat server

    vscode extension으로 tomcat 구동
    - .local/share/code-server/User/workspaceStorage/ 내 extension별로 tomcat 생성
    - $ cp -r $CATALINA_HOME/webapps/manager /home/hongrr123/.local/share/code-server/User/workspaceStorage/aa0f31a/adashen.vscode-tomcat/tomcat/tomcat/webapps/manager
    - 위 명령어로 manager 화면 올릴 수 있음

<pgadmin4-web in apache>
    pgadmin4 repository 설치
    $ sudo rpm -i https://ftp.postgresql.org/pub/pgadmin/pgadmin4/yum/pgadmin4-redhat-repo-1-1.noarch.rpm

    pgadmin4 설치
    $ sudo yum install pgadmin4-web

    pgadmin4 repository 삭제
    $ rm -f /etc/yum.repos.d/pgadmin4.repo
    $ yum reposlit
        - pgadmin이 사라졌는지 확인

    pgadmin4 setup in apache
    $ sudo /usr/pgadmin4/bin/setup-web.sh 
    - 했더니 Apache 실행할 거냐고 물어봄 (갑작스러운데?)
    - 그래서 apache(httpd)가 설치가 되었음.
    - 80 port 접속 후 500 error
    - /var/log/httpd/error_log 보니 /var/lib/pgadmin 에 권한이 없음
        - 쭉 살펴보니깐 apache 소유로 pgadmin이 잡혀있음

    권한변경
    $ chown -R root:root /var/log/pgadmin/
    $ chown -R root:root /var/lib/pgadmin/

    다시 실행
    $ mv /usr/pgadmin4 /usr/lib/pgadmin4
    $ sudo /usr/pgadmin4/bin/setup-web.sh
        - /usr/lib/pgadmin4/bin/setup-web.sh: line 41: /usr/pgadmin4/venv/bin/python3: No such file or directory
        - 괜히 경로 바꿨네 제기랄

    어쨌든 구글링 결과
    $ chcon -R -t httpd_sys_content_rw_t "/var/log/pgadmin/"
    $ chcon -R -t httpd_sys_content_rw_t "/var/lib/pgadmin/"
    - 대충 찾아본 결과 보안설정의 충돌 -> 강제 지정

    SELinux 다시 설정
    $ yum install policycoreutils-python-utils
        - semanage하려고 설치
        
        setsebool -P httpd_can_network_connect 1 1> /dev/null
        setsebool -P httpd_can_network_connect_db 1 1> /dev/null
        semanage fcontext -a -t httpd_var_lib_t '/var/lib/pgadmin(/.*)?' 1> /dev/null
        restorecon -R -v /var/lib/pgadmin 1> /dev/null
        semanage fcontext -a -t httpd_log_t '/var/log/pgadmin(/.*)?' 1> /dev/null
        restorecon -R -v /var/log/pgadmin 1> /dev/null

<pgadmin>
    SSL 파일 설정
    - /var/lib/pgadmin/storage/hongrr123_gmail.com/로 .pem 파일 이동
    - chown -R apache: .
    - chmod 600 *.pem
    
    Create-Server
    - General/name 지정
    - Connection/HostAddress, Port, Username, Password 지정
    - SSL/SSL-mode:Verify-CA, client-cert, client-key, server-ca 지정

<apache>
    $ sudo yum install httpd
    $ sudo systemctl enable --now httpd

<apache-connectors>
    $ wget http://apache.mirror.cdnetworks.com/tomcat/tomcat-connectors/jk/tomcat-connectors-1.2.48-src.tar.gz
    $ tar -xvzf tomcat-connectors-1.2.48-src.tar.gz
    $ rm tomcat-connectors-1.2.48-src.tar.gz

    src만 있으면 되나 했는데 별도 package들도 설치해야 한다고 한다.
        - $ sudo yum install gcc gcc-c++ make httpd-devel

    src compile
    $ cd tomcat-connectors-1.2.48-src/native
    $ ./configure --with-apxs=/usr/bin/apxs
        - which apxs로 httpd-devel 디렉토리 찾아야 함
    
    $ make
        - 했는데 "redhat-hardened-cc1: No such file or directory" 나온다.
        - centos 환경에서 build환경을 맞추기 위한 또 다른 절차가 필요하다.
        - $ sudo yum install redhat-rpm-config
    $ sudo make install
        - sudo로 해야 permission denied 없이 설치가 된다
    
    $ chcon -u system_u -r object_r -t httpd_modules_t /etc/httpd/modules/mod_jk.so
        - SELinux를 넘어서기 위함
    
    Apache에서 Tomcat 모듈을 인식하는 과정
    -방법1
    $ sudo vim /etc/httpd/conf/httpd.conf
        LoadModule jk_module modules/mod_jk.so
        - LoadModule 또는 Include 아래에다가 추가
    
    -방법2
    $ sudo vim /etc/httpd/conf.modules.d/00-jk.conf
        LoadModule jk_module modules/mod_jk.so
        - cent OS 에서는 모듈별로 *.conf 파일을 정리해두었다.
        - conf/httpd.conf 에서 Include로 불러들이는 방식
    
    jk관련 설정
    $ sudo /etc/vim/httpd/conf.d/mod_jk.conf
        <IfModule jk_module>
            JkWorkersFile conf.d/workers_jk.properties
            JkLogFile logs/mod_jk.log
            JkLogLevel info
            JkShmFile run/mod_jk.shm
            JkMountFile conf.d/uriworkermap.properties
        </IfModule>
        - /etc/httpd/ 아래에 conf, conf.d, conf.mod.d 3개가 있다.
        - conf : httpd.conf (숙주, 아래 나머지들을 호출한다)
        - conf.mod.d : module에 대한 *.conf들
        - conf.d : 가장 마지막에 불려지는 옵션같은 설정들

    workers 관련 설정 (mod_jk.conf에서 정의한 파일들)
    $ cd /etc/vim/httpd/conf.d/
    $ sudo touch workers_jk.properties uriworkermap.properties
    
    $ sudo vim workers_jk.properties
        worker.list=tomcat1
        worker.tomcat1.port=8009 
        worker.tomcat1.host=localhost 
        worker.tomcat1.type=ajp13 
        worker.tomcat1.lbfactor=1
        - 여러 인스턴스를 만들 수 있다.

    $ sudo vim uriworkermap.properties
        /*.jsp=tomcat1
        - request 별로 인스턴스를 지정할 수 있다.
    
    tomcat에서 apache 요청받을 준비
    $ vim /usr/share/tomcat/conf/server.xml
        - 기존 http 포트 막기
        - 8009 열기 + URIEncoding

    tomcat & apache 구동
    $ chown apache: /run/httpd
    $ chmod -R 

200830 TODO LIST
    - SSL 적용하기 (certified)
        - 도메인을 먼저 등록해야 한다고 한다.
        - 결재할 수 있는 카드가 없어서 실패
    - Database 구축하기
        - Cloud의 SQL 탭에서 Postgresql만 골랐더니 알아서 생성. (감동..)
        - postgresql - mybatis - spring 연동

<nginx>
    repository 설정
    $ vim /etc/yum.repos.d/nginx.repo
        name=nginx repo
        baseurl=https://nginx.org/packages/centos/7/$basearch/
        gpgcheck=0
        enabled=1
        - baseurl의 7은 version을 의미
    
    configuration
    $ sudo vim /etc/nginx/nginx.conf

    container 생성
        - pgadmin4를 127.0.0.1:5050 으로 publish
    
    nginx.conf 설정
    $ sudo vim /etc/nginx/conf.d/pgadmin4.conf
        server {
            listen 10.178.0.5:80;           -> listening
            server_name 34.64.187.123;      -> (request path, domain available)

            location /pgadmin4/ {
                proxy_set_header X-Script-Name /pgadmin4;   -> pgadmin4 아래 dir로 넣을 때 추가
                proxy_set_header Host $host;                -> pgadmin4 아래 dir로 넣을 때 추가
                proxy_pass http://127.0.0.1:5050/;
                proxy_redirect off;
            }
        }

    SELinux 설정
    $ sudo setsebool -P httpd_can_network_connect 1

    nginx 재기동
    $ systemctl restart nginx

    code-server 추가사항
        proxy_set_header Upgrade       $http_upgrade;
        proxy_set_header Connection    "Upgrade";
        - web socket 설정을 위함