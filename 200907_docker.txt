<docker>
    - apache 설정이 힘들어서 container화 한다.
    
    $ sudo yum install -y yum-utils
        - yum-config-manager 로 stable한 repository를 만들기 위해 필요
    
    $ sudo yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo
        - 그냥 /etc/yum.repos.d/ 에 가져다 놓으면 되는거였군
    
    $ sudo yum install docker-ce --nobest
        - dependency가 있는 containerd.io 버전이 충분하지 않아서 --nobest 옵션 사용

    $ sudo docker run hello-world
        - 그러면 알아서 remote에서 다운로드 받아서 실행
    
    튜토리얼 따라하기
    //출처 : https://docs.docker.com/get-started/part2/
        $ git clone https://github.com/dockersamples/node-bulletin-board
        $ cd node-bulletin-board/bulletin-board-app
        $ sudo docker build --tag bulletinboard:1.0 .
        $ sudo docker run --publish 8000:8080 --detach --name bb bulletinboard:1.0

        $ curl 127.0.0.1:8000

        $ sudo docker rm --force bb
    
<code-server(linux server) by docker>
//출처 : https://hub.docker.com/r/linuxserver/code-server

    $ sudo docker crate \
    > --name=code-server \              -> container의 이름을 지정
    > -u "$(id -u):$(id -g)" \          -> 현재 사용자의 userid:groupid로 실행 
    > -e PASSWORD=dlaghdfhr \           -> 환경변수 설정
    > -p 8090:8443 \                    -> host의 8090으로 container의 config를 publish
    > -v ~/.config:/config \            -> host의 ~/.config를 /config에 연결
    > linuxserver/code-server           -> docker image
    - create는 image로 container를 생성한다.

    $ sudo docker start code-server
        - create 했으면 start 이다.
    $ sudo docker ps -a
        - STATUS : Exited (1) 4 seconds ago
    $ sudo docker logs code-server
        - s6-mkdir: warning: unable to mkdir /var/run/s6: Permission denied
        - user를 지정했더니 문제가 생기고 있다. root로 하자.
    
    $ sudo docker create
    > --name=code-server
    > -e PASSWORD:dlaghdfhr
    > -p 10.178.0.4:8090:8443
    > -v ~/code-server-docker:/config
    > linuxserver/code-server:latest
    - 성공

    $ sudo docker images
        - 이미지가 잘 생성되었군
    $ sudo docker ps -a
        - 컨테이너도 잘 생성되었군

<code-server(codercom) in docker>
    볼륨 생성
    $ sudo docker volume create cdr-vol

    실행
    $ sudo docker run                   -> image(local or remote)를 container로 실행하는 것
    > -d                                -> detached : console 출력 없이 실행
    > --name=code-server                -> container 이름
    > -p 127.0.0.1:8081:8080            -> publish
    > -v cdr-vol:/home/coder/project    -> volume wiring
    > -u "$(id -u):$(id -g)"            -> user
    > codercom/code-server:latest       -> image

    container 이름변경
    $ sudo docker [asis] [tobe]

    container bash 접속
    $ sudo docker exec -it code-server /bin/bash
        - interactive : Keep STDIN open even if not attached
        - tty : Allocate a pseudo-TTY

    container restart
    $ sudo docker restart code-server

<pgadmin in docker>
//출처 : https://www.pgadmin.org/docs/pgadmin4/latest/container_deployment.html

    pgadmin volume 생성
    $ sudo docker volume create pga-vol

    컨테이너 생성
    $ sudo docker run -d
    > --name=pgadmin4
    > -p 10.178.0.5:80:80
    > -e 'PGADMIN_DEFAULT_EMAIL=hongrr123@gmail.com'        -> mandatory
    > -e 'PGADMIN_DEFAULT_PASSWORD=ghdfhr'                  -> mandatory
    > -v pga-vol:/var/lib/pgadmin
    > dpage/pgadmin4:latest

    ssl파일 가져다놓기
    $ sudo docker volume inspect pga-vol
        - 여게서 volume 경로 확인
    
    알아서 client-cert, client-key, server-ca 가져다놓기

    $ sudo chown -R 5050:5050 ./ssl
    $ sudo chmod 600 *.pem

    database 비밀번호는 code-server 비밀번호와 같다

<java in docker>

    Executable jar 만들기
    $ vim pom.xml
        <properties>
            <deploy.target.dir>target</deploy.target.dir>
            <lib.dir>lib</lib.dir>
            <jar.name>hello-docker-java</jar.name>
        </properties>
        
        <build>
            <plugins>
                <plugin>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-jar-plugin</artifactId>
                    <version>2.3.2</version>
                    <configuration>
                        <finalName>${jar.name}</finalName>
                        <outputDirectory>${deploy.target.dir}</outputDirectory><!-- jar 파일이 생성될 폴더 -->
                        <archive>
                            <manifest>
                                <mainClass>App</mainClass><!-- public static void main() 함수가 있는 클래스 지정 -->
                                <addClasspath>true</addClasspath><!-- jar 파일 META-INF/MANIFEST.MF 에 클래스패스 정보 추가 -->
                                <classpathPrefix>${lib.dir}/</classpathPrefix><!-- classpath 추가시 prefix 설정-->
                            </manifest>
                        </archive>
                    </configuration>
                </plugin>
                <plugin>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-dependency-plugin</artifactId>
                    <version>2.3</version>
                    <executions>
                        <execution>
                            <id>copy-dependencies</id>
                            <phase>package</phase>
                            <goals>
                                <goal>copy-dependencies</goal>
                            </goals>
                        </execution>
                    </executions>
                    <configuration>
                        <outputDirectory>${deploy.target.dir}/${lib.dir}</outputDirectory>
                        <overWriteIfNewer>true</overWriteIfNewer>
                    </configuration>
                </plugin>
            </plugins>
        </build>
        - 위의 plugin과 configuration을 적용하면 MANIFEST-INF 수정이 필요가 없다.
        - 바로 실행가능한 jar 파일이 만들어진다.

    Docker build 준비
    $ mkdir ~/hello-docker-java
    $ cd hello-docker-java

    Dockerfile 생성
    $ vim Dockerfile
        FROM openjdk:8-jdk-alpine                           -> 경량화된(alpine) openjdk에서 시작
        RUN addgroup -S java && adduser -S java -G java     -> java라는 사용자와 그룹을 만든다
        USER java:java                                      -> root가 아닌 java:java로 사용자 변경
        ARG JAR_FILE=target/*.jar                           -> variable 만듦
        COPY ${JAR_FILE} app.jar                            -> ${JAR_FILE}을 container로 복사
        ENTRYPOINT ["java","-jar","/app.jar"]               -> 실행 시 수행할 명령어, parameter

    image 만들기
    $ sudo docker build \
    > --build-arg JAR_FILE=hello-docker-java.jar \          -> parameter를 override 할 수 있다
    > -t rokong/hello-docker-java:0.0.1 \                   -> image의 이름과 tag를 지정
    > .                                                     -> Dockerfile이 있는 directory

    Container 만들기
    $ sudo docker run \
    > -i \                                                  -> STDIN을 사용한다
    > --name=hello-d-c \                                    -> container의 이름을 지정
    > rokong/hello-docker-java:0.0.1                        -> run할 image
        - Hello World! 가 출력되면 성공!
    
<vscode with docker>
//출처 : https://code.visualstudio.com/docs/remote/containers
//출처 : https://medium.com/@ssowonny/vs-code%EB%A1%9C-%EC%BB%A8%ED%85%8C%EC%9D%B4%EB%84%88-%EC%95%88%EC%97%90%EC%84%9C-%EA%B0%9C%EB%B0%9C%ED%95%98%EA%B8%B0-d8ed0950d69a
- with Visual Studio Code Remote - Containers extension

    Prerequisite : jdk8 환경 만들기
    $ vim Dockerfile
        FROM openjdk:8-jdk-alpine
        RUN addgroup -S java && adduser -S java -G java
        USER java:java
        - 간단한 openjdk-8만 가져온다
    
    $ sudo docker build -t rokong/hello-docker-java:0.0.2 .

    $ sudo docker run -d -it --name=java-8 rokong/hello-docker-java:0.0.2
        //출처 : https://www.popit.kr/%EA%B0%9C%EB%B0%9C%EC%9E%90%EA%B0%80-%EC%B2%98%EC%9D%8C-docker-%EC%A0%91%ED%95%A0%EB%95%8C-%EC%98%A4%EB%8A%94-%EB%A9%98%EB%B6%95-%EB%AA%87%EA%B0%80%EC%A7%80/
        - docker는 shell이 종료되면 process도 함께 종료된다.
        - 그래서 entrypoint가 따로 없다면 -d를 할 때도 -it를 함께 해주어야 한다.
    
    정상적으로 실행되는지 확인
    $ sudo docker exec -it java-8 java -version

    attach container
    $ sudo docker attach java-8

    detach container (without stop container)
    / $ ctrl+P, ctrl+Q

- code-server에서는 Remote - Containers Extension을 사용하지 못한다
- 전략을 수정해야 겠다

<cdr-java in docker>
- code-server 위에 jdk를 설치하여 보자

    $ mkdir ~/cdr-java

    $ touch ~/cdr-java/config.yaml
        - code-server 설정파일 작성
    
    Dockerfile
    $ vim ~/cdr-java/Dockerfile
        FROM codercom/code-server:latest
        RUN mkdir -p /home/coder/.local/share/code-server \
            && chown coder /home/coder/.local/share/code-server
        VOLUME /home/coder/.local/share/code-server

        COPY config.yaml /home/coder/.config/code-server/config.yaml

    image
    $ sudo docker build -t rokong/cdr-java:0.0.1 .

    container
    $ sudo docker run -d --name code-server -p 127.0.0.1:8081:8080 rokong/cdr-java:0.0.3
        - 여기까지 cdr에 고정된 config를 사용할 수 있게 되었다
    
    jdk를 올려보자
    $ vim ~/cdr-java/Dockerfile
        # jdk8
        FROM openjdk:8-jdk-alpine AS JDK_IMG
        RUN rm -rf /etc/passwd \
            && rm -rf /etc/shadow \
            && rm -rf /etc/group

        # code server
        FROM codercom/code-server:latest
        COPY --from=JDK_IMG / /
        - 먼저 jdk를 base로 하고
        - code-server에 덮어쓰기되면 안 되는 파일들을 제거
        - 새로운 이미지 가져옴 (multi stage)
        - 기존 이미지에서 그대로 copy
        - 이후 설정은 같다
    
    maven을 올려보자
    //출처 : docker-maven/openjdk-8-slim/Dockerfile
    $ vim ~/cdr-java/Dockerfile
        ARG MAVEN_VERSION=3.6.3
        ARG SHA=c35a1803a6e70a126e80b2b3ae33eed961f83ed74d18fcd16909b2d44d7dada3203f1ffe726c17ef8dcca2dcaa9fca676987befeadc9b9f759967a8cb77181c0
        ARG BASE_URL=https://apache.osuosl.org/maven/maven-3/${MAVEN_VERSION}/binaries

        RUN sudo mkdir -p /usr/share/maven /usr/share/maven/ref \
        && sudo curl -fsSL -o /tmp/apache-maven.tar.gz ${BASE_URL}/apache-maven-${MAVEN_VERSION}-bin.tar.gz \
        && sudo echo "${SHA}  /tmp/apache-maven.tar.gz" | sha512sum -c - \
        && sudo tar -xzf /tmp/apache-maven.tar.gz -C /usr/share/maven --strip-components=1 \
        && sudo rm -f /tmp/apache-maven.tar.gz \
        && sudo ln -s /usr/share/maven/bin/mvn /usr/bin/mvn

        ENV MAVEN_HOME /usr/share/maven
        ENV MAVEN_CONFIG "$CODER_HOME/.m2"

        COPY maven-settings.xml /usr/share/maven/ref/

    code-server standalone 설치
    ARG STANDALONE_INSTALL_PREFIX=/usr
    ARG CACHE_DIR=/tmp
    ARG VERSION=3.5.0
    ARG OS=linux
    ARG ARCH=amd64

RUN cd /tmp/ \
    && curl -LJO https://github.com/cdr/code-server/releases/download/v3.5.0/code-server_3.5.0_amd64.deb \
    && cd / \
    && mkdir -p "$STANDALONE_INSTALL_PREFIX/lib" "$STANDALONE_INSTALL_PREFIX/bin" \
    && tar -C "$STANDALONE_INSTALL_PREFIX/lib" -xzf "$CACHE_DIR/code-server-$VERSION-$OS-$ARCH.tar.gz" \
    && mv -f "$STANDALONE_INSTALL_PREFIX/lib/code-server-$VERSION-$OS-$ARCH" "$STANDALONE_INSTALL_PREFIX/lib/code-server-$VERSION" \
    && ln -fs "$STANDALONE_INSTALL_PREFIX/lib/code-server-$VERSION/bin/code-server" "$STANDALONE_INSTALL_PREFIX/bin/code-server"

cd /tmp/ \
    && curl -LJO "https://github.com/cdr/code-server/releases/download/v3.5.0/code-server-3.5.0-linux-amd64.tar.gz" \
    && cd / \
    && mkdir -p "/usr/lib" "/usr/bin" \
    && tar -C "/usr/lib" -xzf "/tmp/code-server-3.5.0-linux-amd64.tar.gz" \
    && mv -f "/usr/lib/code-server-3.5.0-linux-amd64" "/usr/lib/code-server-3.5.0" \
    && ln -fs "/usr/lib/code-server-3.5.0/bin/code-server" "/usr/bin/code-server"

<docker-compose>
    설치
    $ sudo curl -L "https://github.com/docker/compose/releases/download/1.27.1/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
    $ sudo chmod +x /usr/local/bin/docker-compose
    $ sudo ln -s /usr/local/bin/docker-compose /usr/bin/docker-compose
    $ sudo docker-compose --version
        - 뭐야 끝났네?

    폴더생성
    $ mkdir ~/cdr-dood
    $ cd ~/cdr-dood
    $ vim Dockerfile
        FROM codercom/code-server:latest
        COPY config.yaml /home/coder/.config/code-server/config.yaml
        - 일단 Dockerfile을 만들어둔다
    
    docker-compose.yml 작성
    $ vim docker-compose.yml
        version: "3"
        services:                           // containers가 아닌 services라고 부른다
            cdr:                            // 마음대로 정한다. 향후 서비스 이름이 된다
                build:                      
                    context: .                  // docker build 할 directory
                    dockerfile: ./Dockerfile    // docker build 할 Dockerfile
                ports:
                    - 127.0.0.1:8081:8080       // -p 할 때 쓸거

    실행
    $ sudo docker-compose up -d
        - create and start containers
    $ sudo docker-compose ps
        - Service 이름이 나오고 State가 UP 이면 성공
    
    정지
    $ sudo docker-compose down

<dood>
    $ vim Dockerfile
        ARG DOCKERVERSION=19.03.12
        RUN sudo curl -fsSLO https://download.docker.com/linux/static/stable/x86_64/docker-${DOCKERVERSION}.tgz \
        && sudo tar xzvf docker-${DOCKERVERSION}.tgz --strip 1 -C /usr/bin docker/docker \
        && sudo rm docker-${DOCKERVERSION}.tgz
        - binary file들 중에서 docker만 뺀다

<spring-dood>
//출처 : https://spring.io/guides/topicals/spring-boot-docker

    - 목표 배포할 때도, 테스트 할 때도 사용할 이미지파일을 만들자
        - Dockerfile을 CI Script로 활용하자
    - prerequisite
        - cdr에서 pom.xml과 src 내 파일들을 생성한다
    - spring-Dockerfile
        - src와 pom.xml을 통해 target/*.war를 만든다
        - *.war를 Tomcat에 배포한다
    - 그리고 tomcat을 구동한다

    - 고민한 점 : orchestrator의 비중을 누구한테 둘 것인가?
        - IDE (ex. VSCode)              -> pros: easy handling (with GUI) / cons: unavailable fine tuning
        - Build Tool (ex. Maven)        -> pros: compatible with build process / cons: dependency(compared to Gradle)
        - CI/CD Platform (ex. GitLab)   -> pros: compatible during deploying / cons: dependency(compared to Jenkins)
        - Container (ex. Docker)
    - 고민의 결론 : GitLab이 좋아 보이는데, 아는게 Docker니깐 Docker로 접근하자.

    cdr - tomcat 실시간 배포를 위한 설정
    - maven에서 war package 생성위치를 맞춘다.

    $ vim spring-dood/pom.xml
        <maven.war.directory>${env.HOME}/webapps</maven.war.directory>
        <plugin>
          <artifactId>maven-war-plugin</artifactId>
          <version>3.2.2</version>
          <configuration>
            <outputDirectory>${maven.war.directory}</outputDirectory>
          </configuration>
        </plugin>
        - $HOME/webapps 에 war 생성

    $ vim spring-Dockerfile
        # tomcat
        FROM tomcat:7.0.105-jdk8-openjdk-slim-buster
        ARG APP_NAME=spring-dood
        COPY --from=MVN /root/webapps/$APP_NAME*.war $CATALINA_HOME/webapps/$APP_NAME.war
        RUN chmod 646 -R $CATALINA_HOME/webapps/$APP_NAME.war
        - spring 이미지에서도 webapps 아래로 target 잡는다
        - cdr에서의 배포를 위해 646으로 바꾼다

    $ vim docker-compose
        # tomcat deploy (wired with tomcat)
          - webapps:/home/coder/webapps

        # tomcat deploy (wired with cdr)
          - webapps:/usr/local/tomcat/webapps

        volumes:
          webapps:
        - docker-compose에 독립적인 volume을 두고
          이를 각각 cdr과 was에 연결한다 (그럼 알아서 공유하겠지)

    maven local repository를 위한 설정
    - 최초 image build할 때와 cdr에서의 build할 때 시간을 많이 잡아 먹는다
    $ vim cdr-Dockerfile
        RUN mkdir -p /home/coder/.m2/repository \
        && chown -R coder:coder /home/coder/.m2
    
    $ vim docker-compose
    cdr:
      volumes:
        # maven repository
        - $HOME/.m2/repository:/home/coder/.m2/repository

    tomcat in docker debugging
    $ vim spring-Dockerfile
        environment:
            JPDA_ADDRESS: "8000"
            JPDA_TRANSPORT: "dt_socket"
        command:
            ["catalina.sh", "jpda", "run"]
        - jpda 통해 debugging 가능 (port address는 마음대로 설정)

    docker remote debugging
    - docker-compose로 구동 시 컨테이너들은 같은 bridge 에 묶이게 된다.
    - 즉 그 안에서 컨테이너끼리 연결할 수 있다는 것.

    docker network 확인방법
    $ docker network ls
        - 여기서 docker compose 프로젝트 ID 확인
    $ docker network inspect <ID>
        - Containers 아래 이름과 함께있는 IPv4Address 확인
        - 그 주소로 다른 컨테이너에서 접근 가능
        - 즉 Expose 없이도 Container 끼리 Communication 가능

    vscode remote debugging 설정
    - Debugger > Settings 누르면 launch.json 나옴
    - configuration에 hostname과 port 수정 후 추가
        {
            "type": "java",
            "name": "Debug (Attach) - Remote",
            "request": "attach",
            "hostName": "172.20.0.3",
            "port": 8000
        }
    

200914 TODO list
    - cdr remote configuration & cdr extension 저장

200913 TODO list
CI 전략을 짜보자
//출처 : https://developers.redhat.com/blog/2013/11/08/ci-strategies-1of3/
//출처 : https://docs.gitlab.com/ee/ci/README.html

docker-compose를 채택하자(parameter 입력하기가 귀찮다)

<docker ref>
    도커 이미지 원리
    //출처 : https://www.44bits.io/ko/post/how-docker-image-work

    볼륨과 마운트 차이
    //출처 : https://www.daleseo.com/docker-volumes-bind-mounts/

    spring boot 이미지 만들기
    //출처 : https://velog.io/@skygl/Docker-스프링-부트-사이트-가이드의-Docker-연동하는-명령어-이해하기